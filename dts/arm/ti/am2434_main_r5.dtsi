/*
 * Copyright (c) 2025 Siemens Mobility GmbH
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <mem.h>
#include <freq.h>
#include <arm/armv7-r.dtsi>
#include <zephyr/dt-bindings/interrupt-controller/ti-vim.h>

/ {
	cpus {
		#address-cells = <1>;
		#size-cells = <0>;

		cpu@0 {
			device_type = "cpu";
			compatible = "arm,cortex-r5";
			reg = <0>;
			clock-frequency = <DT_FREQ_M(800)>;
			i-cache-line-size = <DT_SIZE_K(8)>;
			d-cache-line-size = <DT_SIZE_K(8)>;
		};
	};

	pinctrl: pinctrl@f4000 {
		compatible = "ti,k3-pinctrl";
		reg = <0x000f4000 0x2ac>;
		status = "okay";
	};

	// SRAM the core runs exclusively on. No other core should access this
	sram_core: memory@70080000 {
		reg = <0x70080000 DT_SIZE_K(256)>;
	};

	// SRAM that could be used by all cores. Atomic instructions (e.g. LDREX)
	// don't work due to how the SRAM is connected!
	sram_shared: memory@70180000 {
		reg = <0x70180000 DT_SIZE_K(256)>;
	};

	// SRAM where the bootloader ran. Could be used, if needed
	sram_bootloader: memory@70000000 {
		reg = <0x70000000 (DT_SIZE_K(256) * 2)>;
	};

	// When not changing the reset vector it's located at 0x0 which is inside the ATCM. To be
	// able to use it for the reset vector and code/data it's split up into two chunks
	atcm_boot: memory@0 {
		device_type = "memory";
		compatible = "mmio-sram";
		reg = <0x0 DT_SIZE_K(1)>;
	};

	atcm: memory@400 {
		device_type = "memory";
		compatible = "zephyr,memory-region", "mmio-sram";
		reg = <0x400 DT_SIZE_K(31)>;
		zephyr,memory-region = "ATCM";
		zephyr,memory-region-flags = "rwx";
	};

	btcm: memory@41010000 {
		device_type = "memory";
		compatible = "zephyr,memory-region", "mmio-sram";
		reg = <0x41010000 DT_SIZE_K(32)>;
		zephyr,memory-region = "BTCM";
		zephyr,memory-region-flags = "rwx";
	};

	vim: interrupt-controller@2fff0000 {
		#address-cells = <1>;
		compatible = "ti,vim";
		reg = <0x2fff0000 0x2400>;
		interrupt-controller;
		#interrupt-cells = <4>;
		status = "okay";
	};

	// We use timer 11 as Zephyr time source since there is no dedicated one that fulfills the
	// requirements
	systick_timer: timer@24b0000 {
		compatible = "ti,am654-timer";
		reg = <0x024b0000 0x70>;
		interrupts = <0 163 IRQ_TYPE_LEVEL IRQ_DEFAULT_PRIORITY>;
		interrupt-parent = <&vim>;
		status = "okay";
	};

	chosen {
		zephyr,sram = &sram_core;
	};
};
